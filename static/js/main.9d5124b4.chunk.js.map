{"version":3,"sources":["components/Controls/Controls.module.css","components/Balance/Balance.module.css","components/TransactionHistory/TransactionHistory.module.css","components/Controls/Controls.js","components/Balance/Balance.js","components/TransactionHistory/TransactionHistory.js","components/Dashboard/Dashboard.js","components/App.js","index.js"],"names":["module","exports","Controls","value","handleClick","handleChange","className","styles","controls","type","onChange","name","onClick","Balance","balance","transactions","handleBalance","filter","transaction","reduce","acc","amount","TransactionHistory","history","map","key","id","date","Dashboard","state","target","setState","e","parseFloat","Date","shortid","generate","toLocaleString","toast","error","reset","warning","push","updateBalance","prevValue","persistedTransaction","localStorage","getItem","initialBalance","JSON","parse","this","prevProp","setBalance","setItem","stringify","dashboard","Component","configure","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","rtl","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9d5124b4.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"controls\":\"Controls_controls__1cZa4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"balance\":\"Balance_balance__nBPmO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"history\":\"TransactionHistory_history__2gZhb\"};","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './Controls.module.css';\n\nconst Controls = ({ value, handleClick, handleChange }) => {\n  return (\n    <section className={styles.controls}>\n      <input type=\"number\" value={value} onChange={handleChange} />\n      <button type=\"button\" name=\"deposit\" onClick={handleClick}>\n        Deposit\n      </button>\n      <button type=\"button\" name=\"withdraw\" onClick={handleClick}>\n        Withdraw\n      </button>\n    </section>\n  );\n};\n\nControls.propTypes = {\n  value: PropTypes.string.isRequired,\n  handleChange: PropTypes.func.isRequired,\n  handleClick: PropTypes.func.isRequired,\n};\n\nexport default Controls;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './Balance.module.css';\n\nconst Balance = ({ balance, transactions }) => {\n  const handleBalance = type => {\n    const result = transactions\n      .filter(transaction => transaction.type === type)\n      .reduce((acc, amount) => (acc + amount.amount), 0);\n    return result;\n  };\n\n  return (\n    <section className={styles.balance}>\n      <span>&#8593; {handleBalance(\"deposit\")}$</span>\n      <span>&#8595; {handleBalance(\"withdraw\")}$</span>\n      <span>Balance: {`${balance}`}</span>\n    </section>\n  );\n};\n\nBalance.propTypes = {\n  balance: PropTypes.number.isRequired,\n};\n\nexport default Balance;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './TransactionHistory.module.css';\n\nconst TransactionHistory = ({ transactions }) => {\n  return (\n    <table className={styles.history}>\n      <thead>\n        <tr>\n          <th>Transaction</th>\n          <th>Amount</th>\n          <th>Date</th>\n        </tr>\n      </thead>\n      <tbody>\n        {transactions.map(transaction => (\n          <tr key={transaction.id}>\n            <td>{transaction.type}</td>\n            <td>{transaction.amount}$</td>\n            <td>{transaction.date}</td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n};\n\nTransactionHistory.propTypes = {\n  transactions: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      type: PropTypes.string.isRequired,\n      amount: PropTypes.number.isRequired,\n      date: PropTypes.string.isRequired,\n    }),\n  ).isRequired,\n};\n\nexport default TransactionHistory;\n","import React, { Component } from 'react';\nimport shortid from 'shortid';\nimport { toast } from 'react-toastify';\nimport Controls from '../Controls/Controls';\nimport Balance from '../Balance/Balance';\nimport TransactionHistory from '../TransactionHistory/TransactionHistory';\nimport styles from './Dashboard.module.css';\nimport 'react-toastify/dist/ReactToastify.css';\n\nclass Dashboard extends Component {\n  state = {\n    balance: 0,\n    transactions: [],\n    value: '',\n  };\n\n  componentDidMount() {\n    const persistedTransaction = localStorage.getItem('transactions');\n    const initialBalance = localStorage.getItem('balance');\n    if (persistedTransaction && initialBalance) {\n      const balance = JSON.parse(initialBalance);\n      this.setState({\n        transactions: JSON.parse(persistedTransaction),\n        balance: balance.balance,\n      });\n    }\n  }\n\n  componentDidUpdate(prevProp) {\n    const { transactions } = this.state;\n    if (prevProp.transactions !== transactions) {\n      const { balance } = this.state;\n      const setBalance = {\n        balance,\n      };\n      localStorage.setItem('transactions', JSON.stringify(transactions));\n      localStorage.setItem('balance', JSON.stringify(setBalance));\n    }\n  }\n\n  handleChange = ({ target }) => {\n    const { value } = target;\n    this.setState({\n      value,\n    });\n  };\n\n  handleClick = e => {\n    const { balance } = this.state;\n    const { name } = e.target;\n    const value = parseFloat(this.state.value);\n    const date = new Date();\n\n    const transaction = {\n      id: shortid.generate(),\n      type: name,\n      amount: value,\n      date: date.toLocaleString(),\n    };\n    if (name === 'withdraw' && value > balance) {\n      toast.error('На счету недостаточно средств для проведения операции!');\n      this.reset();\n    } else if (this.state.value === '' || value <= 0) {\n      toast.warning('Введите сумму для проведения операции!');\n      this.reset();\n    } else {\n      this.setState(\n        state => {\n          state.transactions.push(transaction);\n        },\n        () => this.updateBalance(name, value),\n      );\n      this.reset();\n    }\n  };\n\n  updateBalance = (name, value) => {\n    this.setState(prevValue => ({\n      balance:\n        name === 'deposit'\n          ? prevValue.balance + value\n          : prevValue.balance - value,\n    }));\n  };\n\n  reset = () => {\n    this.setState({\n      value: '',\n    });\n  };\n\n  render() {\n    const { balance, transactions } = this.state;\n    const { value } = this.state;\n    return (\n      <div className={styles.dashboard}>\n        <Controls\n          value={value}\n          handleChange={this.handleChange}\n          handleClick={this.handleClick}\n          onChange={this.handleChange}\n        />\n        {/* <Balance balance={balance} withdraw={withdraw} deposit={deposit} /> */}\n        <Balance balance={balance} transactions={transactions} />\n        <TransactionHistory transactions={transactions} />\n      </div>\n    );\n  }\n}\n\nexport default Dashboard;\n","import React from 'react';\nimport { toast } from 'react-toastify';\nimport Dashboard from './Dashboard/Dashboard';\n\ntoast.configure({\n  position: 'bottom-right',\n  autoClose: 2000,\n  hideProgressBar: false,\n  closeOnClick: true,\n  pauseOnHover: true,\n  draggable: true,\n  rtl: false,\n});\n\nconst App = () => <Dashboard />;\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}